pipeline{
  agent any
  //{
    // docker {
    //   image 'maven'
    //   args '-v $HOME/.m2:/root/.m2'
    // }
  //}
  stages{
    stage ('SCM Checkout'){
      steps{
        script{
        git branch: 'master', 
        credentialsId: 'github-personal', 
        url: 'https://github.com/abhijeetroychoudhury/hello-world.git'
      }
    }
    }
    stage('UNIT TEST'){
      steps {
        script{
	    	  def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
          def mvncommand = "${mvnhome}/bin/mvn"
          bat "${mvncommand} test"
        }
      }
    }

	  stage('INTEGRATION TEST'){
      steps {
        script{
	    	  def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        	def mvncommand = "${mvnhome}/bin/mvn"
          bat "${mvncommand} verify -DskipUnitTests"
        }
      }
    }
    
    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
      steps {
        script{
	    	  def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        	def mvncommand = "${mvnhome}/bin/mvn"
          bat "${mvncommand} checkstyle:checkstyle"
        }
      }
    }

    stage('Quality Gate Status Check'){
      steps{
        script{
			    withSonarQubeEnv('sonarQube') { 
              def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
              def mvncommand = "${mvnhome}/bin/mvn"
              bat "${mvncommand} sonar:sonar"
            }
		        /*timeout(time: 1, unit: 'HOURS') {
		          def qg = waitForQualityGate()
		            if (qg.status != 'OK') {
		            error "Pipeline aborted due to quality gate failure: ${qg.status}"
		            }
              }*/
          }
        }
      }

    stage ('MVN clean package'){
      steps{
        script{
        def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        def mvncommand = "${mvnhome}/bin/mvn"
        bat "${mvncommand} clean package"
        }
      }
    }
    
    stage ('Pushing war to Nexus'){
      steps{
        script{
          nexusArtifactUploader artifacts: 
          [[artifactId: 'maven-project', 
          classifier: '', 
          file: 'target/webapp/*.war', 
          type: 'war']], 
          credentialsId: 'nexus', 
          groupId: 'com.example.maven-project', 
          nexusUrl: 'localhost:8081', 
          nexusVersion: 'nexus3', 
          protocol: 'http', 
          repository: 'http://localhost:8081/repository/webapp-repo/', 
          version: '1.0-SNAPSHOT'
          }
        }
      }

    stage ('building docker image'){
      steps{
        script{
        bat 'docker build -t abhi96dock/hello-code:1.0 .'
    }
      }
    }
    stage('Pushing Docker Image'){
      steps{
        script{
        withCredentials([string(credentialsId: 'docker-pwd', variable: 'pwd')]) {
        bat "docker login -u abhi96dock -p ${pwd}"
        bat 'docker push abhi96dock/hello-code:1.0'
        }
        }
      }
   }
   
 
   stage('Run Container with application'){
     steps{
       script{
          bat 'docker run -p 8090:8080 -d --name hello-code-demo abhi96dock/hello-code:1.0'
       }
     }     
   }
  }
}
